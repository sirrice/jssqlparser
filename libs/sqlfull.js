var ast, _;

_ = _ = require('underscore');

ast = ast = require('./ast.js');

put_if_not_null = function(o, key, val) {
  if (!_.isEmpty(val)) {
    o[key] = val;
  }
  return o;
};

flatstr = function(x, rejectSpace, joinChar) {
  if (rejectSpace == null) {
    rejectSpace = false;
  }
  if (joinChar == null) {
    joinChar = '';
  }
  return _.reject(_.flatten(x), _.isEmpty).join(joinChar);
};

module.exports = (function() {
  "use strict";

  /*
   * Generated by PEG.js 0.9.0.
   *
   * http://pegjs.org/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  function peg$parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        parser  = this,

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = function(c) { 
            var qs = _.compact(_.without(_.flatten(c), ";", " ", "\t"));
            return new ast.Queries(qs);
          },
        peg$c1 = function(g) { return g; },
        peg$c2 = function(cf) { 
            return new ast.FunctionQuery(cf[0], cf[4]); 
          },
        peg$c3 = function(ss) { 
                 return _.chain(ss)
                   .flatten()
                   .filter(function(s, idx) { if (idx % 2 == 0) return s; })
                   .value();
               },
        peg$c4 = function(s, oo) {
                  if (_.isNull(oo)) return null;
                  var exprs = _.chain(oo)
                    .flatten()
                    .without(",", " ", "\n", "\t")
                    .reject(function(o) { return _.isString(o); })
                    .value();
                  return new ast.OrderBy(exprs);
                },
        peg$c5 = function(s, o, ll) {
                  if (_.isNull(ll)) return null;
                  var offset = null;
                  if (!_.isNull(ll[2])) offset = ll[2][1]
                  return new ast.Limit(ll[1], offset);
                },
        peg$c6 = function(s, o, l) { 
            return new ast.Query("select", s,o,l);
          },
        peg$c7 = function(d, cc) { 
                   var clauses = _.without(_.flatten(cc), ",", " ", "\n", "\t");
                   return new ast.Project(clauses);
                 },
        peg$c8 = function(d, c, ff) { return ff ? new ast.From(ff[1]) : null; },
        peg$c9 = function(d, c, f, e) { return e ? e[1] : null; },
        peg$c10 = function(d, c, f, w, ot) { 
                              return _.chain(ot)
                                .flatten()
                                .without(",", " ", ",", null)
                                .reject(_.isEmpty)
                            },
        peg$c11 = function(d, c, f, w, gb) { 
                        // only support a single having expression for now
                        if (_.isEmpty(gb) || _.isNull(gb)) return null;
                        var groups = gb[2];
                        var having = null;
                        if (!_.isNull(gb[3])) having = gb[3][1];
                        return new ast.Group(groups, new ast.Having(having));
                      },
        peg$c12 = function(d, c, f, w, g) { return new ast.SelectCore(c, f, w, g); },
        peg$c13 = function(c) { 
                        return new ast.ProjectClause(
                          new ast.SpecialExpr("*", c[0])); },
        peg$c14 = function(c) { 
                        var alias = null;
                        if (!_.isNull(c[1])) alias = c[1][2];
                        return new ast.ProjectClause(c[0], alias )
                      },
        peg$c15 = function(c) {
                        var alias = null;
                        if (!_.isNull(c[1])) alias = c[1][2];
                        return new ast.ProjectClause(c[1], alias);
                      },
        peg$c16 = function() { 
                    return new ast.ProjectClause(
                      new ast.SpecialExpr("*"));
                   },
        peg$c17 = function(r) { return r[1]; },
        peg$c18 = function(s) { 
            return _.without(_.flatten(s), " ", "\t", "\n", ",");
          },
        peg$c19 = function(x) {
              return new ast.Table(x[0].name, x[3]); },
        peg$c20 = function(a) { return a[2] },
        peg$c21 = function(p) {
                return new ast.QueryTable(p[1], p[3]); 
              },
        peg$c22 = function(u) {
              return new ast.TableUDF(u[0], u[4], u[7]);
            },
        peg$c23 = function(x) {
              return x; 
              },
        peg$c24 = "LET",
        peg$c25 = { type: "literal", value: "LET", description: "\"LET\"" },
        peg$c26 = "TABLEUDF",
        peg$c27 = { type: "literal", value: "TABLEUDF", description: "\"TABLEUDF\"" },
        peg$c28 = "ROWUDF",
        peg$c29 = { type: "literal", value: "ROWUDF", description: "\"ROWUDF\"" },
        peg$c30 = "RENDER",
        peg$c31 = { type: "literal", value: "RENDER", description: "\"RENDER\"" },
        peg$c32 = "COMPUTE",
        peg$c33 = { type: "literal", value: "COMPUTE", description: "\"COMPUTE\"" },
        peg$c34 = "RETURN",
        peg$c35 = { type: "literal", value: "RETURN", description: "\"RETURN\"" },
        peg$c36 = "SOURCE",
        peg$c37 = { type: "literal", value: "SOURCE", description: "\"SOURCE\"" },
        peg$c38 = function(input, name, render_or_compute, args, source) {
            input = _.isNull(input) ? "TABLEUDF" : input;
            render_or_compute = _.isNull(render_or_compute) ? "RENDER" : render_or_compute;
            return new ast.LetUDF(name, args, input, render_or_compute, source.value);
          },
        peg$c39 = function(args) {
            args = _.without(_.flatten(args), ',', ' ', '\t', '\n');
            return args;
          },
        peg$c40 = function(arg) { 
            arg = _.without(_.flatten(arg), ' ', '\t', '\n');
            return new ast.LetUDFArg(arg[0], arg[1]);
          },
        peg$c41 = "AND",
        peg$c42 = { type: "literal", value: "AND", description: "\"AND\"" },
        peg$c43 = function(c) {
            c = _.flatten(c);
            c = _.without(c, ' ', '\t', 'AND');
            return new ast.Where(c);
          },
        peg$c44 = function(x) { return new ast.ValExpr(x); },
        peg$c45 = function(t) { return new ast.ColExpr(t[2], t[0]); },
        peg$c46 = function(c) { return new ast.ColExpr(c); },
        peg$c47 = function(r) { return r; },
        peg$c48 = function(u) { return new ast.UnaryExpr(u[0], u[1]); },
        peg$c49 = function(p) { return p[1]; },
        peg$c50 = function(e) { 
                     if (_.isNull(e[0])) return e[2];
                     if (_.isNull(e[0][0]))
                       return new ast.UnaryExpr("NOT EXISTS", e[2]);
                     return new ast.UnaryExpr("EXISTS", e[2]);
                   },
        peg$c51 = function(v) { return v[1] },
        peg$c52 = function(s) { return s[1]; },
        peg$c53 = function(t) { return new ast.TableExpr(t); },
        peg$c54 = function(j) { return _.chain(j)
                                  .flatten()
                                  .without(",", " ", "\t", null, "(", ")")
                                  .value()
                        },
        peg$c55 = function(i) { 
                        var op = "IN";
                        if (!_.isNull(i[1])) op = "NOT IN";
                        return new ast.Expr(i[0], op, i[3]);
                      },
        peg$c56 = function(a) { return new ast.Expr(a[0], a[1], a[2]); },
        peg$c57 = function(b) { return new ast.Expr(b[0], b[1]); },
        peg$c58 = function(c) { return new ast.Expr(c[0], "IS NOT", c[c.length-1]) },
        peg$c59 = function(f) { 
                        if (f.length == 5) {
                          return new ast.BetweenExpr(f[0], "NOT BETWEEN", f[3], f[5]);
                        } return new ast.BetweenExpr(f[0], "BETWEEN", f[3], f[5]);
                      },
        peg$c60 = function(e) { return e[1]; },
        peg$c61 = ":",
        peg$c62 = { type: "literal", value: ":", description: "\":\"" },
        peg$c63 = function(r) {
            return new ast.ParamExpr(r[1])
          },
        peg$c64 = function(v) { return new ast.ColExpr(v, null); },
        peg$c65 = function(y) { return y[1]; },
        peg$c66 = "EXISTS",
        peg$c67 = { type: "literal", value: "EXISTS", description: "\"EXISTS\"" },
        peg$c68 = function(d) { return new ast.QuantExpr("exists", d[2], d[5], d[7]); },
        peg$c69 = "FORALL",
        peg$c70 = { type: "literal", value: "FORALL", description: "\"FORALL\"" },
        peg$c71 = function(e) { return new ast.QuantExpr("all", e[2], e[5], e[7]); },
        peg$c72 = function(a) { 
                          var distinct = !_.isNull(a[0]);
                          var args = _.chain(a[1])
                            .flatten()
                            .without(",", " ", "\t", "\n")
                            .compact()
                            .value();
                          return {
                            distinct: distinct,
                            args: args
                          }
                         },
        peg$c73 = function() { 
                           return { 
                            distinct: false,
                            args: [new ast.SpecialExpr("*")]
                           }; 
                          },
        peg$c74 = function(cf) { 
            var args = cf[3];
            return new ast.FuncExpr(cf[0], args.args);
          },
        peg$c75 = function(r) { return new ast.ColExpr(r[2], r[0]); },
        peg$c76 = function(r) { return new ast.TableExpr(r); },
        peg$c77 = function(digits) { 
            var x = flatstr(digits);
            if (x.indexOf('.') >= 0) {
              return parseFloat(x);
            }
            return parseInt(x);
          },
        peg$c78 = function(t) { if (!_.isNull(t) && !_.isNull(t[0])) t = t[0];
                      return new ast.SpecialExpr("*", t); },
        peg$c79 = function(a) { 
                        var distinct = !_.isNull(a[0]);
                        var args = _.chain(a[1])
                          .flatten()
                          .without(",", " ", "\t", null)
                          .value();
                        // ignores distinct
                        return args;
                      },
        peg$c80 = function(cf) { 
            return new ast.FuncExpr(cf[0], cf[3]);
          },
        peg$c81 = function(r) {
            var t = null;
            if (!_.isNull(r[0]) && !_.isNull(r[0][0])) t = r[0][0];
            return new ast.ColExpr(r[1], t);
          },
        peg$c82 = function(gt) { return gt[1]; },
        peg$c83 = function(ot) { 
            var asc = true; 
            if (ot[1][1] == "DESC") asc = false;
            return new ast.OrderByClause(ot[1][0], asc);
          },
        peg$c84 = function(o) { return { op: flatstr(o) } },
        peg$c85 = "-",
        peg$c86 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c87 = "+",
        peg$c88 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c89 = "~",
        peg$c90 = { type: "literal", value: "~", description: "\"~\"" },
        peg$c91 = "NOT",
        peg$c92 = { type: "literal", value: "NOT", description: "\"NOT\"" },
        peg$c93 = function(x) { return x[1] },
        peg$c94 = "||",
        peg$c95 = { type: "literal", value: "||", description: "\"||\"" },
        peg$c96 = "*",
        peg$c97 = { type: "literal", value: "*", description: "\"*\"" },
        peg$c98 = "/",
        peg$c99 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c100 = "%",
        peg$c101 = { type: "literal", value: "%", description: "\"%\"" },
        peg$c102 = "<<",
        peg$c103 = { type: "literal", value: "<<", description: "\"<<\"" },
        peg$c104 = ">>",
        peg$c105 = { type: "literal", value: ">>", description: "\">>\"" },
        peg$c106 = "&",
        peg$c107 = { type: "literal", value: "&", description: "\"&\"" },
        peg$c108 = "|",
        peg$c109 = { type: "literal", value: "|", description: "\"|\"" },
        peg$c110 = "<=",
        peg$c111 = { type: "literal", value: "<=", description: "\"<=\"" },
        peg$c112 = ">=",
        peg$c113 = { type: "literal", value: ">=", description: "\">=\"" },
        peg$c114 = "<",
        peg$c115 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c116 = ">",
        peg$c117 = { type: "literal", value: ">", description: "\">\"" },
        peg$c118 = "=",
        peg$c119 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c120 = "==",
        peg$c121 = { type: "literal", value: "==", description: "\"==\"" },
        peg$c122 = "!=",
        peg$c123 = { type: "literal", value: "!=", description: "\"!=\"" },
        peg$c124 = "<>",
        peg$c125 = { type: "literal", value: "<>", description: "\"<>\"" },
        peg$c126 = "IS",
        peg$c127 = { type: "literal", value: "IS", description: "\"IS\"" },
        peg$c128 = "IS NOT",
        peg$c129 = { type: "literal", value: "IS NOT", description: "\"IS NOT\"" },
        peg$c130 = "IN",
        peg$c131 = { type: "literal", value: "IN", description: "\"IN\"" },
        peg$c132 = "NOT IN",
        peg$c133 = { type: "literal", value: "NOT IN", description: "\"NOT IN\"" },
        peg$c134 = "LIKE",
        peg$c135 = { type: "literal", value: "LIKE", description: "\"LIKE\"" },
        peg$c136 = "GLOB",
        peg$c137 = { type: "literal", value: "GLOB", description: "\"GLOB\"" },
        peg$c138 = "MATCH",
        peg$c139 = { type: "literal", value: "MATCH", description: "\"MATCH\"" },
        peg$c140 = "REGEXP",
        peg$c141 = { type: "literal", value: "REGEXP", description: "\"REGEXP\"" },
        peg$c142 = "OR",
        peg$c143 = { type: "literal", value: "OR", description: "\"OR\"" },
        peg$c144 = /^[A-Za-z0-9_]/,
        peg$c145 = { type: "class", value: "[A-Za-z0-9_]", description: "[A-Za-z0-9_]" },
        peg$c146 = function(str) { return str.join('') },
        peg$c147 = "int",
        peg$c148 = { type: "literal", value: "int", description: "\"int\"" },
        peg$c149 = "numeric",
        peg$c150 = { type: "literal", value: "numeric", description: "\"numeric\"" },
        peg$c151 = "float",
        peg$c152 = { type: "literal", value: "float", description: "\"float\"" },
        peg$c153 = "text",
        peg$c154 = { type: "literal", value: "text", description: "\"text\"" },
        peg$c155 = "varchar",
        peg$c156 = { type: "literal", value: "varchar", description: "\"varchar\"" },
        peg$c157 = "char",
        peg$c158 = { type: "literal", value: "char", description: "\"char\"" },
        peg$c159 = function(n) { return new ast.Table(n, null); },
        peg$c160 = /^[0-9]/,
        peg$c161 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c162 = ".",
        peg$c163 = { type: "literal", value: ".", description: "\".\"" },
        peg$c164 = ",",
        peg$c165 = { type: "literal", value: ",", description: "\",\"" },
        peg$c166 = ";",
        peg$c167 = { type: "literal", value: ";", description: "\";\"" },
        peg$c168 = "--",
        peg$c169 = { type: "literal", value: "--", description: "\"--\"" },
        peg$c170 = "(",
        peg$c171 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c172 = ")",
        peg$c173 = { type: "literal", value: ")", description: "\")\"" },
        peg$c174 = "\n",
        peg$c175 = { type: "literal", value: "\n", description: "\"\\n\"" },
        peg$c176 = /^[^\n]/,
        peg$c177 = { type: "class", value: "[^\\n]", description: "[^\\n]" },
        peg$c178 = "/*",
        peg$c179 = { type: "literal", value: "/*", description: "\"/*\"" },
        peg$c180 = "*/",
        peg$c181 = { type: "literal", value: "*/", description: "\"*/\"" },
        peg$c182 = { type: "any", description: "any character" },
        peg$c183 = "'",
        peg$c184 = { type: "literal", value: "'", description: "\"'\"" },
        peg$c185 = /^[^"']/,
        peg$c186 = { type: "class", value: "[^\"']", description: "[^\"']" },
        peg$c187 = function(s) { return s[1].join(''); },
        peg$c188 = "\\",
        peg$c189 = { type: "literal", value: "\\", description: "\"\\\\\"" },
        peg$c190 = "",
        peg$c191 = "now",
        peg$c192 = { type: "literal", value: "now", description: "\"now\"" },
        peg$c193 = /^[ \t\n\r]/,
        peg$c194 = { type: "class", value: "[ \\t\\n\\r]", description: "[ \\t\\n\\r]" },
        peg$c195 = "ADD",
        peg$c196 = { type: "literal", value: "ADD", description: "\"ADD\"" },
        peg$c197 = "ALL",
        peg$c198 = { type: "literal", value: "ALL", description: "\"ALL\"" },
        peg$c199 = "ALTER",
        peg$c200 = { type: "literal", value: "ALTER", description: "\"ALTER\"" },
        peg$c201 = "AS",
        peg$c202 = { type: "literal", value: "AS", description: "\"AS\"" },
        peg$c203 = "ASC",
        peg$c204 = { type: "literal", value: "ASC", description: "\"ASC\"" },
        peg$c205 = "BETWEEN",
        peg$c206 = { type: "literal", value: "BETWEEN", description: "\"BETWEEN\"" },
        peg$c207 = "BY",
        peg$c208 = { type: "literal", value: "BY", description: "\"BY\"" },
        peg$c209 = "CAST",
        peg$c210 = { type: "literal", value: "CAST", description: "\"CAST\"" },
        peg$c211 = "COLUMN",
        peg$c212 = { type: "literal", value: "COLUMN", description: "\"COLUMN\"" },
        peg$c213 = "DESC",
        peg$c214 = { type: "literal", value: "DESC", description: "\"DESC\"" },
        peg$c215 = "DISTINCT",
        peg$c216 = { type: "literal", value: "DISTINCT", description: "\"DISTINCT\"" },
        peg$c217 = "E",
        peg$c218 = { type: "literal", value: "E", description: "\"E\"" },
        peg$c219 = "ESCAPE",
        peg$c220 = { type: "literal", value: "ESCAPE", description: "\"ESCAPE\"" },
        peg$c221 = "EXCEPT",
        peg$c222 = { type: "literal", value: "EXCEPT", description: "\"EXCEPT\"" },
        peg$c223 = "EXPLAIN",
        peg$c224 = { type: "literal", value: "EXPLAIN", description: "\"EXPLAIN\"" },
        peg$c225 = "EVENT",
        peg$c226 = { type: "literal", value: "EVENT", description: "\"EVENT\"" },
        peg$c227 = "FROM",
        peg$c228 = { type: "literal", value: "FROM", description: "\"FROM\"" },
        peg$c229 = "GROUP",
        peg$c230 = { type: "literal", value: "GROUP", description: "\"GROUP\"" },
        peg$c231 = "HAVING",
        peg$c232 = { type: "literal", value: "HAVING", description: "\"HAVING\"" },
        peg$c233 = "INNER",
        peg$c234 = { type: "literal", value: "INNER", description: "\"INNER\"" },
        peg$c235 = "INSERT",
        peg$c236 = { type: "literal", value: "INSERT", description: "\"INSERT\"" },
        peg$c237 = "INTERSECT",
        peg$c238 = { type: "literal", value: "INTERSECT", description: "\"INTERSECT\"" },
        peg$c239 = "INTO",
        peg$c240 = { type: "literal", value: "INTO", description: "\"INTO\"" },
        peg$c241 = "ISNULL",
        peg$c242 = { type: "literal", value: "ISNULL", description: "\"ISNULL\"" },
        peg$c243 = "JOIN",
        peg$c244 = { type: "literal", value: "JOIN", description: "\"JOIN\"" },
        peg$c245 = "KEY",
        peg$c246 = { type: "literal", value: "KEY", description: "\"KEY\"" },
        peg$c247 = "LEFT",
        peg$c248 = { type: "literal", value: "LEFT", description: "\"LEFT\"" },
        peg$c249 = "LIMIT",
        peg$c250 = { type: "literal", value: "LIMIT", description: "\"LIMIT\"" },
        peg$c251 = "NO",
        peg$c252 = { type: "literal", value: "NO", description: "\"NO\"" },
        peg$c253 = "NOTNULL",
        peg$c254 = { type: "literal", value: "NOTNULL", description: "\"NOTNULL\"" },
        peg$c255 = "NULL",
        peg$c256 = { type: "literal", value: "NULL", description: "\"NULL\"" },
        peg$c257 = "OF",
        peg$c258 = { type: "literal", value: "OF", description: "\"OF\"" },
        peg$c259 = "OFFSET",
        peg$c260 = { type: "literal", value: "OFFSET", description: "\"OFFSET\"" },
        peg$c261 = "ON",
        peg$c262 = { type: "literal", value: "ON", description: "\"ON\"" },
        peg$c263 = "ORDER",
        peg$c264 = { type: "literal", value: "ORDER", description: "\"ORDER\"" },
        peg$c265 = "OUTER",
        peg$c266 = { type: "literal", value: "OUTER", description: "\"OUTER\"" },
        peg$c267 = "PRIMARY",
        peg$c268 = { type: "literal", value: "PRIMARY", description: "\"PRIMARY\"" },
        peg$c269 = "QUERY",
        peg$c270 = { type: "literal", value: "QUERY", description: "\"QUERY\"" },
        peg$c271 = "RAISE",
        peg$c272 = { type: "literal", value: "RAISE", description: "\"RAISE\"" },
        peg$c273 = "REFERENCES",
        peg$c274 = { type: "literal", value: "REFERENCES", description: "\"REFERENCES\"" },
        peg$c275 = "RENAME",
        peg$c276 = { type: "literal", value: "RENAME", description: "\"RENAME\"" },
        peg$c277 = "REPLACE",
        peg$c278 = { type: "literal", value: "REPLACE", description: "\"REPLACE\"" },
        peg$c279 = "ROW",
        peg$c280 = { type: "literal", value: "ROW", description: "\"ROW\"" },
        peg$c281 = "SAVEPOINT",
        peg$c282 = { type: "literal", value: "SAVEPOINT", description: "\"SAVEPOINT\"" },
        peg$c283 = "SELECT",
        peg$c284 = { type: "literal", value: "SELECT", description: "\"SELECT\"" },
        peg$c285 = "SET",
        peg$c286 = { type: "literal", value: "SET", description: "\"SET\"" },
        peg$c287 = "TABLE",
        peg$c288 = { type: "literal", value: "TABLE", description: "\"TABLE\"" },
        peg$c289 = "TEMP",
        peg$c290 = { type: "literal", value: "TEMP", description: "\"TEMP\"" },
        peg$c291 = "TEMPORARY",
        peg$c292 = { type: "literal", value: "TEMPORARY", description: "\"TEMPORARY\"" },
        peg$c293 = "THEN",
        peg$c294 = { type: "literal", value: "THEN", description: "\"THEN\"" },
        peg$c295 = "TO",
        peg$c296 = { type: "literal", value: "TO", description: "\"TO\"" },
        peg$c297 = "UNION",
        peg$c298 = { type: "literal", value: "UNION", description: "\"UNION\"" },
        peg$c299 = "USING",
        peg$c300 = { type: "literal", value: "USING", description: "\"USING\"" },
        peg$c301 = "VALUES",
        peg$c302 = { type: "literal", value: "VALUES", description: "\"VALUES\"" },
        peg$c303 = "VIRTUAL",
        peg$c304 = { type: "literal", value: "VIRTUAL", description: "\"VIRTUAL\"" },
        peg$c305 = "WITH",
        peg$c306 = { type: "literal", value: "WITH", description: "\"WITH\"" },
        peg$c307 = "WHERE",
        peg$c308 = { type: "literal", value: "WHERE", description: "\"WHERE\"" },
        peg$c309 = { type: "other", description: "string" },
        peg$c310 = "\"",
        peg$c311 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c312 = function(chars) {
              return { type: "Literal", value: chars.join("") };
            },
        peg$c313 = function() { return text(); },
        peg$c314 = function(sequence) { return sequence; },
        peg$c315 = function() { return ""; },
        peg$c316 = "0",
        peg$c317 = { type: "literal", value: "0", description: "\"0\"" },
        peg$c318 = function() { return "\0"; },
        peg$c319 = /^[\n\r\u2028\u2029]/,
        peg$c320 = { type: "class", value: "[\\n\\r\\u2028\\u2029]", description: "[\\n\\r\\u2028\\u2029]" },
        peg$c321 = "b",
        peg$c322 = { type: "literal", value: "b", description: "\"b\"" },
        peg$c323 = function() { return "\b";   },
        peg$c324 = "f",
        peg$c325 = { type: "literal", value: "f", description: "\"f\"" },
        peg$c326 = function() { return "\f";   },
        peg$c327 = "n",
        peg$c328 = { type: "literal", value: "n", description: "\"n\"" },
        peg$c329 = function() { return "\n";   },
        peg$c330 = "r",
        peg$c331 = { type: "literal", value: "r", description: "\"r\"" },
        peg$c332 = function() { return "\r";   },
        peg$c333 = "t",
        peg$c334 = { type: "literal", value: "t", description: "\"t\"" },
        peg$c335 = function() { return "\t";   },
        peg$c336 = "v",
        peg$c337 = { type: "literal", value: "v", description: "\"v\"" },
        peg$c338 = function() { return "\x0B"; },
        peg$c339 = { type: "other", description: "end of line" },
        peg$c340 = "\r\n",
        peg$c341 = { type: "literal", value: "\r\n", description: "\"\\r\\n\"" },
        peg$c342 = "\r",
        peg$c343 = { type: "literal", value: "\r", description: "\"\\r\"" },
        peg$c344 = "\u2028",
        peg$c345 = { type: "literal", value: "\u2028", description: "\"\\u2028\"" },
        peg$c346 = "\u2029",
        peg$c347 = { type: "literal", value: "\u2029", description: "\"\\u2029\"" },
        peg$c348 = "x",
        peg$c349 = { type: "literal", value: "x", description: "\"x\"" },
        peg$c350 = "u",
        peg$c351 = { type: "literal", value: "u", description: "\"u\"" },
        peg$c352 = function(digits) {
              return String.fromCharCode(parseInt(digits, 16));
            },
        peg$c353 = /^[0-9a-f]/i,
        peg$c354 = { type: "class", value: "[0-9a-f]i", description: "[0-9a-f]i" },

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function error(message) {
      throw peg$buildException(
        message,
        null,
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p, ch;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column,
          seenCR: details.seenCR
        };

        while (p < pos) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, found, location) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parsestart() {
      var s0;

      s0 = peg$parsestmt_list();

      return s0;
    }

    function peg$parsestmt_list() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsewhitespace();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsegeneral_stmt();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsewhitespace();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$currPos;
            s7 = peg$parsesemicolon();
            if (s7 !== peg$FAILED) {
              s8 = peg$parsewhitespace();
              if (s8 !== peg$FAILED) {
                s9 = peg$parsegeneral_stmt();
                if (s9 === peg$FAILED) {
                  s9 = null;
                }
                if (s9 !== peg$FAILED) {
                  s10 = peg$parsewhitespace();
                  if (s10 !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$currPos;
              s7 = peg$parsesemicolon();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsewhitespace();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsegeneral_stmt();
                  if (s9 === peg$FAILED) {
                    s9 = null;
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parsewhitespace();
                    if (s10 !== peg$FAILED) {
                      s7 = [s7, s8, s9, s10];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsesemicolon();
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                s2 = [s2, s3, s4, s5, s6];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c0(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsegeneral_stmt() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseselect_stmt();
      if (s1 === peg$FAILED) {
        s1 = peg$parsefunc_stmt();
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c1(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsefunc_stmt() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsename();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsewhitespace();
        if (s3 !== peg$FAILED) {
          s4 = peg$parselparen();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsewhitespace();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseselect_stmt();
              if (s6 === peg$FAILED) {
                s6 = peg$parsetable_name();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsewhitespace();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parserparen();
                  if (s8 !== peg$FAILED) {
                    s2 = [s2, s3, s4, s5, s6, s7, s8];
                    s1 = s2;
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c2(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseselect_stmt() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$currPos;
      s3 = peg$parseselect_core();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parsecompound_operator();
        if (s6 !== peg$FAILED) {
          s7 = peg$parseselect_core();
          if (s7 !== peg$FAILED) {
            s6 = [s6, s7];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parsecompound_operator();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseselect_core();
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s1;
        s2 = peg$c3(s2);
      }
      s1 = s2;
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        s4 = peg$parseORDER();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseBY();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseordering_term();
            if (s6 !== peg$FAILED) {
              s7 = [];
              s8 = peg$currPos;
              s9 = peg$parsewhitespace();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parseordering_term();
                  if (s11 !== peg$FAILED) {
                    s9 = [s9, s10, s11];
                    s8 = s9;
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$currPos;
                s9 = peg$parsewhitespace();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parsecomma();
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parseordering_term();
                    if (s11 !== peg$FAILED) {
                      s9 = [s9, s10, s11];
                      s8 = s9;
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              }
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s2;
          s3 = peg$c4(s1, s3);
        }
        s2 = s3;
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$currPos;
          s5 = peg$parseLIMIT();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseexpr();
            if (s6 !== peg$FAILED) {
              s7 = peg$currPos;
              s8 = peg$parseOFFSET();
              if (s8 !== peg$FAILED) {
                s9 = peg$parseexpr();
                if (s9 !== peg$FAILED) {
                  s8 = [s8, s9];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              if (s7 === peg$FAILED) {
                s7 = null;
              }
              if (s7 !== peg$FAILED) {
                s5 = [s5, s6, s7];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c5(s1, s2, s4);
          }
          s3 = s4;
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c6(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseselect_core() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;

      s0 = peg$currPos;
      s1 = peg$parseSELECT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDISTINCT();
        if (s2 === peg$FAILED) {
          s2 = peg$parseALL();
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$currPos;
          s5 = peg$parseselect_result();
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$currPos;
            s8 = peg$parsewhitespace();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsecomma();
              if (s9 !== peg$FAILED) {
                s10 = peg$parseselect_result();
                if (s10 !== peg$FAILED) {
                  s8 = [s8, s9, s10];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$currPos;
              s8 = peg$parsewhitespace();
              if (s8 !== peg$FAILED) {
                s9 = peg$parsecomma();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parseselect_result();
                  if (s10 !== peg$FAILED) {
                    s8 = [s8, s9, s10];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c7(s2, s4);
          }
          s3 = s4;
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$currPos;
            s6 = peg$parseFROM();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsejoin_source();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c8(s2, s3, s5);
            }
            s4 = s5;
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$currPos;
              s7 = peg$parseWHERE();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsewhere();
                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s5;
                s6 = peg$c9(s2, s3, s4, s6);
              }
              s5 = s6;
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$currPos;
                s8 = peg$parseGROUP();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseBY();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$currPos;
                    s11 = peg$currPos;
                    s12 = peg$parsegrouping_term();
                    if (s12 !== peg$FAILED) {
                      s13 = [];
                      s14 = peg$currPos;
                      s15 = peg$parsecomma();
                      if (s15 !== peg$FAILED) {
                        s16 = peg$parsegrouping_term();
                        if (s16 !== peg$FAILED) {
                          s15 = [s15, s16];
                          s14 = s15;
                        } else {
                          peg$currPos = s14;
                          s14 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s14;
                        s14 = peg$FAILED;
                      }
                      while (s14 !== peg$FAILED) {
                        s13.push(s14);
                        s14 = peg$currPos;
                        s15 = peg$parsecomma();
                        if (s15 !== peg$FAILED) {
                          s16 = peg$parsegrouping_term();
                          if (s16 !== peg$FAILED) {
                            s15 = [s15, s16];
                            s14 = s15;
                          } else {
                            peg$currPos = s14;
                            s14 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s14;
                          s14 = peg$FAILED;
                        }
                      }
                      if (s13 !== peg$FAILED) {
                        s12 = [s12, s13];
                        s11 = s12;
                      } else {
                        peg$currPos = s11;
                        s11 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s11;
                      s11 = peg$FAILED;
                    }
                    if (s11 !== peg$FAILED) {
                      peg$savedPos = s10;
                      s11 = peg$c10(s2, s3, s4, s5, s11);
                    }
                    s10 = s11;
                    if (s10 !== peg$FAILED) {
                      s11 = peg$currPos;
                      s12 = peg$parseHAVING();
                      if (s12 !== peg$FAILED) {
                        s13 = peg$parseexpr();
                        if (s13 !== peg$FAILED) {
                          s12 = [s12, s13];
                          s11 = s12;
                        } else {
                          peg$currPos = s11;
                          s11 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s11;
                        s11 = peg$FAILED;
                      }
                      if (s11 === peg$FAILED) {
                        s11 = null;
                      }
                      if (s11 !== peg$FAILED) {
                        s8 = [s8, s9, s10, s11];
                        s7 = s8;
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c11(s2, s3, s4, s5, s7);
                }
                s6 = s7;
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c12(s2, s3, s4, s5, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseselect_result() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsewhitespace();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$currPos;
        s5 = peg$parsename();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsedot();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsestar();
            if (s7 !== peg$FAILED) {
              s5 = [s5, s6, s7];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c13(s4);
        }
        s3 = s4;
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$currPos;
          s5 = peg$parsevalue();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parseAS();
            if (s7 !== peg$FAILED) {
              s8 = peg$parsewhitespace();
              if (s8 !== peg$FAILED) {
                s9 = peg$parsename();
                if (s9 !== peg$FAILED) {
                  s7 = [s7, s8, s9];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c14(s4);
          }
          s3 = s4;
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$currPos;
            s5 = peg$parsecolumn_ref();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parseAS();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsewhitespace();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsename();
                  if (s9 !== peg$FAILED) {
                    s7 = [s7, s8, s9];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c15(s4);
            }
            s3 = s4;
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$parsestar();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c16();
              }
              s3 = s4;
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c17(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsejoin_source() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsewhitespace();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesingle_source();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parsewhitespace();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsecomma();
            if (s7 !== peg$FAILED) {
              s8 = peg$parsewhitespace();
              if (s8 !== peg$FAILED) {
                s9 = peg$parsesingle_source();
                if (s9 !== peg$FAILED) {
                  s6 = [s6, s7, s8, s9];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parsewhitespace();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsecomma();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsewhitespace();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsesingle_source();
                  if (s9 !== peg$FAILED) {
                    s6 = [s6, s7, s8, s9];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c18(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsesingle_source() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsetable_name();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseAS();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsewhitespace1();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsename();
            if (s5 !== peg$FAILED) {
              s2 = [s2, s3, s4, s5];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c19(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parselparen();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseselect_stmt();
          if (s3 !== peg$FAILED) {
            s4 = peg$parserparen();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$currPos;
              s7 = peg$parseAS();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsewhitespace();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsename();
                  if (s9 !== peg$FAILED) {
                    s7 = [s7, s8, s9];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s5;
                s6 = peg$c20(s6);
              }
              s5 = s6;
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s2 = [s2, s3, s4, s5];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c21(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$currPos;
          s2 = peg$parsename();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsewhitespace();
            if (s3 !== peg$FAILED) {
              s4 = peg$parselparen();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsewhitespace();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseselect_stmt();
                  if (s6 === peg$FAILED) {
                    s6 = peg$parsetable_name();
                    if (s6 === peg$FAILED) {
                      s6 = peg$parseselect_result();
                    }
                  }
                  if (s6 === peg$FAILED) {
                    s6 = null;
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsewhitespace();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parserparen();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$currPos;
                        s10 = peg$currPos;
                        s11 = peg$parseAS();
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parsewhitespace();
                          if (s12 !== peg$FAILED) {
                            s13 = peg$parsename();
                            if (s13 !== peg$FAILED) {
                              s11 = [s11, s12, s13];
                              s10 = s11;
                            } else {
                              peg$currPos = s10;
                              s10 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s10;
                            s10 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s10;
                          s10 = peg$FAILED;
                        }
                        if (s10 !== peg$FAILED) {
                          peg$savedPos = s9;
                          s10 = peg$c20(s10);
                        }
                        s9 = s10;
                        if (s9 === peg$FAILED) {
                          s9 = null;
                        }
                        if (s9 !== peg$FAILED) {
                          s2 = [s2, s3, s4, s5, s6, s7, s8, s9];
                          s1 = s2;
                        } else {
                          peg$currPos = s1;
                          s1 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c22(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsetable_name();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c23(s1);
            }
            s0 = s1;
          }
        }
      }

      return s0;
    }

    function peg$parseletudf_stmt() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c24) {
        s1 = peg$c24;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c25); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsewhitespace1();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 8) === peg$c26) {
            s3 = peg$c26;
            peg$currPos += 8;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c27); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c28) {
              s3 = peg$c28;
              peg$currPos += 6;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c29); }
            }
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsewhitespace1();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsename();
              if (s5 !== peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c30) {
                  s6 = peg$c30;
                  peg$currPos += 6;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c31); }
                }
                if (s6 === peg$FAILED) {
                  if (input.substr(peg$currPos, 7) === peg$c32) {
                    s6 = peg$c32;
                    peg$currPos += 7;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c33); }
                  }
                }
                if (s6 === peg$FAILED) {
                  s6 = null;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsewhitespace1();
                  if (s7 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 6) === peg$c34) {
                      s8 = peg$c34;
                      peg$currPos += 6;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c35); }
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsewhitespace();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parselparen();
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseletudf_arg_list();
                          if (s11 === peg$FAILED) {
                            s11 = null;
                          }
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parserparen();
                            if (s12 !== peg$FAILED) {
                              s13 = peg$parsewhitespace1();
                              if (s13 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 6) === peg$c36) {
                                  s14 = peg$c36;
                                  peg$currPos += 6;
                                } else {
                                  s14 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c37); }
                                }
                                if (s14 !== peg$FAILED) {
                                  s15 = peg$parsewhitespace();
                                  if (s15 !== peg$FAILED) {
                                    s16 = peg$parsejs_string_literal();
                                    if (s16 !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s1 = peg$c38(s3, s5, s6, s11, s16);
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseletudf_arg_list() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseletudf_arg();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parsewhitespace();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsecomma();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseletudf_arg();
            if (s7 !== peg$FAILED) {
              s5 = [s5, s6, s7];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parsewhitespace();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsecomma();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseletudf_arg();
              if (s7 !== peg$FAILED) {
                s5 = [s5, s6, s7];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c39(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseletudf_arg() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsewhitespace();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsename();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsewhitespace1();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsetype();
            if (s5 !== peg$FAILED) {
              s2 = [s2, s3, s4, s5];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c40(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsewhere() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsewhitespace1();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpr();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parsewhitespace();
          if (s6 !== peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c41) {
              s7 = peg$c41;
              peg$currPos += 3;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c42); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parseexpr();
              if (s8 !== peg$FAILED) {
                s6 = [s6, s7, s8];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parsewhitespace();
            if (s6 !== peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c41) {
                s7 = peg$c41;
                peg$currPos += 3;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c42); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parseexpr();
                if (s8 !== peg$FAILED) {
                  s6 = [s6, s7, s8];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c43(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsevalue() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsewhitespace();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecall_function();
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseliteral_value();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c44(s4);
          }
          s3 = s4;
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$currPos;
            s5 = peg$parsetable_name();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsedot();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsename();
                if (s7 !== peg$FAILED) {
                  s5 = [s5, s6, s7];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c45(s4);
            }
            s3 = s4;
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$parsename();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c46(s4);
              }
              s3 = s4;
              if (s3 === peg$FAILED) {
                s3 = peg$currPos;
                s4 = peg$parseparam();
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s4 = peg$c47(s4);
                }
                s3 = s4;
                if (s3 === peg$FAILED) {
                  s3 = peg$currPos;
                  s4 = peg$currPos;
                  s5 = peg$parseunary_operator();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseexpr();
                    if (s6 !== peg$FAILED) {
                      s5 = [s5, s6];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                  if (s4 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s4 = peg$c48(s4);
                  }
                  s3 = s4;
                  if (s3 === peg$FAILED) {
                    s3 = peg$currPos;
                    s4 = peg$currPos;
                    s5 = peg$parselparen();
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parseexpr();
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parsewhitespace();
                        if (s7 !== peg$FAILED) {
                          s8 = peg$parserparen();
                          if (s8 !== peg$FAILED) {
                            s5 = [s5, s6, s7, s8];
                            s4 = s5;
                          } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s4;
                          s4 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                    if (s4 !== peg$FAILED) {
                      peg$savedPos = s3;
                      s4 = peg$c49(s4);
                    }
                    s3 = s4;
                    if (s3 === peg$FAILED) {
                      s3 = peg$currPos;
                      s4 = peg$currPos;
                      s5 = peg$currPos;
                      s6 = peg$parseNOT();
                      if (s6 === peg$FAILED) {
                        s6 = null;
                      }
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parseEXISTS();
                        if (s7 !== peg$FAILED) {
                          s6 = [s6, s7];
                          s5 = s6;
                        } else {
                          peg$currPos = s5;
                          s5 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                      if (s5 === peg$FAILED) {
                        s5 = null;
                      }
                      if (s5 !== peg$FAILED) {
                        s6 = peg$parselparen();
                        if (s6 !== peg$FAILED) {
                          s7 = peg$parseselect_stmt();
                          if (s7 !== peg$FAILED) {
                            s8 = peg$parserparen();
                            if (s8 !== peg$FAILED) {
                              s5 = [s5, s6, s7, s8];
                              s4 = s5;
                            } else {
                              peg$currPos = s4;
                              s4 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s4;
                          s4 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                      if (s4 !== peg$FAILED) {
                        peg$savedPos = s3;
                        s4 = peg$c50(s4);
                      }
                      s3 = s4;
                    }
                  }
                }
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c51(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseexpr() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsewhitespace();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$currPos;
        s5 = peg$parsevalue();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseNOT();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parseIN();
            if (s7 !== peg$FAILED) {
              s8 = peg$currPos;
              s9 = peg$currPos;
              s10 = peg$currPos;
              s11 = peg$parselparen();
              if (s11 !== peg$FAILED) {
                s12 = peg$parseselect_stmt();
                if (s12 !== peg$FAILED) {
                  s13 = peg$parserparen();
                  if (s13 !== peg$FAILED) {
                    s11 = [s11, s12, s13];
                    s10 = s11;
                  } else {
                    peg$currPos = s10;
                    s10 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s10;
                  s10 = peg$FAILED;
                }
              } else {
                peg$currPos = s10;
                s10 = peg$FAILED;
              }
              if (s10 !== peg$FAILED) {
                peg$savedPos = s9;
                s10 = peg$c52(s10);
              }
              s9 = s10;
              if (s9 === peg$FAILED) {
                s9 = peg$currPos;
                s10 = peg$parsetable_name();
                if (s10 !== peg$FAILED) {
                  peg$savedPos = s9;
                  s10 = peg$c53(s10);
                }
                s9 = s10;
              }
              if (s9 !== peg$FAILED) {
                peg$savedPos = s8;
                s9 = peg$c54(s9);
              }
              s8 = s9;
              if (s8 !== peg$FAILED) {
                s5 = [s5, s6, s7, s8];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c55(s4);
        }
        s3 = s4;
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$currPos;
          s5 = peg$parsevalue();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsebinary_op_wout_and();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseexpr();
              if (s7 !== peg$FAILED) {
                s5 = [s5, s6, s7];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c56(s4);
          }
          s3 = s4;
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$currPos;
            s5 = peg$parsee_value();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseISNULL();
              if (s6 === peg$FAILED) {
                s6 = peg$parseNOTNULL();
                if (s6 === peg$FAILED) {
                  s6 = peg$currPos;
                  s7 = peg$parseNOT();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseNULL();
                    if (s8 !== peg$FAILED) {
                      s7 = [s7, s8];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                }
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c57(s4);
            }
            s3 = s4;
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$currPos;
              s5 = peg$parsee_value();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseIS();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseNOT();
                  if (s7 === peg$FAILED) {
                    s7 = null;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsee_expr();
                    if (s8 !== peg$FAILED) {
                      s5 = [s5, s6, s7, s8];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c58(s4);
              }
              s3 = s4;
              if (s3 === peg$FAILED) {
                s3 = peg$currPos;
                s4 = peg$currPos;
                s5 = peg$parsee_value();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseNOT();
                  if (s6 === peg$FAILED) {
                    s6 = null;
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseBETWEEN();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parsee_expr();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parseAND();
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parsee_expr();
                          if (s10 !== peg$FAILED) {
                            s5 = [s5, s6, s7, s8, s9, s10];
                            s4 = s5;
                          } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s4;
                          s4 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s4 = peg$c59(s4);
                }
                s3 = s4;
                if (s3 === peg$FAILED) {
                  s3 = peg$parsevalue();
                }
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c60(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseparam() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 58) {
        s2 = peg$c61;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c62); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsename();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s4 = peg$c61;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c62); }
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c63(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsee_where() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsewhitespace();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsee_expr();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parsewhitespace();
          if (s6 !== peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c41) {
              s7 = peg$c41;
              peg$currPos += 3;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c42); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parsee_expr();
              if (s8 !== peg$FAILED) {
                s6 = [s6, s7, s8];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parsewhitespace();
            if (s6 !== peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c41) {
                s7 = peg$c41;
                peg$currPos += 3;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c42); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsee_expr();
                if (s8 !== peg$FAILED) {
                  s6 = [s6, s7, s8];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c43(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsee_value() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsewhitespace();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsee_call_function();
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseliteral_value();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c44(s4);
          }
          s3 = s4;
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$currPos;
            s5 = peg$parsetable_name();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsedot();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsename();
                if (s7 !== peg$FAILED) {
                  s5 = [s5, s6, s7];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c45(s4);
            }
            s3 = s4;
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$parsename();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c64(s4);
              }
              s3 = s4;
              if (s3 === peg$FAILED) {
                s3 = peg$currPos;
                s4 = peg$parseparam();
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s4 = peg$c47(s4);
                }
                s3 = s4;
                if (s3 === peg$FAILED) {
                  s3 = peg$currPos;
                  s4 = peg$currPos;
                  s5 = peg$parselparen();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parsee_where();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parsewhitespace();
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parserparen();
                        if (s8 !== peg$FAILED) {
                          s5 = [s5, s6, s7, s8];
                          s4 = s5;
                        } else {
                          peg$currPos = s4;
                          s4 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                  if (s4 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s4 = peg$c65(s4);
                  }
                  s3 = s4;
                }
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c51(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsee_expr() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsewhitespace();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$currPos;
        s5 = peg$parsee_value();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsebinary_op_wout_and();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsee_expr();
            if (s7 !== peg$FAILED) {
              s5 = [s5, s6, s7];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c56(s4);
        }
        s3 = s4;
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$currPos;
          s5 = peg$parsee_value();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseISNULL();
            if (s6 === peg$FAILED) {
              s6 = peg$parseNOTNULL();
              if (s6 === peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parseNOT();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseNULL();
                  if (s8 !== peg$FAILED) {
                    s7 = [s7, s8];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              }
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c57(s4);
          }
          s3 = s4;
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$currPos;
            s5 = peg$parsee_value();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseIS();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseNOT();
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsee_expr();
                  if (s8 !== peg$FAILED) {
                    s5 = [s5, s6, s7, s8];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c58(s4);
            }
            s3 = s4;
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$currPos;
              if (input.substr(peg$currPos, 6) === peg$c66) {
                s5 = peg$c66;
                peg$currPos += 6;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c67); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsewhitespace1();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsename();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseIN();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsewhitespace1();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsee_table_ref();
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parsewhitespace1();
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parsee_where();
                            if (s12 !== peg$FAILED) {
                              s5 = [s5, s6, s7, s8, s9, s10, s11, s12];
                              s4 = s5;
                            } else {
                              peg$currPos = s4;
                              s4 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s4;
                          s4 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c68(s4);
              }
              s3 = s4;
              if (s3 === peg$FAILED) {
                s3 = peg$currPos;
                s4 = peg$currPos;
                if (input.substr(peg$currPos, 6) === peg$c69) {
                  s5 = peg$c69;
                  peg$currPos += 6;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c70); }
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parsewhitespace1();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsename();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parseIN();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parsewhitespace1();
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parsee_table_ref();
                          if (s10 !== peg$FAILED) {
                            s11 = peg$parsewhitespace1();
                            if (s11 !== peg$FAILED) {
                              s12 = peg$parsee_where();
                              if (s12 !== peg$FAILED) {
                                s5 = [s5, s6, s7, s8, s9, s10, s11, s12];
                                s4 = s5;
                              } else {
                                peg$currPos = s4;
                                s4 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s4;
                              s4 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s4;
                          s4 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s4 = peg$c71(s4);
                }
                s3 = s4;
                if (s3 === peg$FAILED) {
                  s3 = peg$currPos;
                  s4 = peg$currPos;
                  s5 = peg$parsee_value();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseNOT();
                    if (s6 === peg$FAILED) {
                      s6 = null;
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parseBETWEEN();
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parsee_expr();
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parseAND();
                          if (s9 !== peg$FAILED) {
                            s10 = peg$parsee_expr();
                            if (s10 !== peg$FAILED) {
                              s5 = [s5, s6, s7, s8, s9, s10];
                              s4 = s5;
                            } else {
                              peg$currPos = s4;
                              s4 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s4;
                          s4 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                  if (s4 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s4 = peg$c59(s4);
                  }
                  s3 = s4;
                  if (s3 === peg$FAILED) {
                    s3 = peg$currPos;
                    s4 = peg$parsee_value();
                    if (s4 !== peg$FAILED) {
                      peg$savedPos = s3;
                      s4 = peg$c1(s4);
                    }
                    s3 = s4;
                  }
                }
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c60(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsee_call_function() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsename();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsewhitespace();
        if (s3 !== peg$FAILED) {
          s4 = peg$parselparen();
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$currPos;
            s7 = peg$parseDISTINCT();
            if (s7 === peg$FAILED) {
              s7 = null;
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$currPos;
              s9 = peg$parsee_expr();
              if (s9 !== peg$FAILED) {
                s10 = [];
                s11 = peg$currPos;
                s12 = peg$parsewhitespace();
                if (s12 !== peg$FAILED) {
                  s13 = peg$parsecomma();
                  if (s13 !== peg$FAILED) {
                    s14 = peg$parsee_expr();
                    if (s14 !== peg$FAILED) {
                      s12 = [s12, s13, s14];
                      s11 = s12;
                    } else {
                      peg$currPos = s11;
                      s11 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s11;
                    s11 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s11;
                  s11 = peg$FAILED;
                }
                while (s11 !== peg$FAILED) {
                  s10.push(s11);
                  s11 = peg$currPos;
                  s12 = peg$parsewhitespace();
                  if (s12 !== peg$FAILED) {
                    s13 = peg$parsecomma();
                    if (s13 !== peg$FAILED) {
                      s14 = peg$parsee_expr();
                      if (s14 !== peg$FAILED) {
                        s12 = [s12, s13, s14];
                        s11 = s12;
                      } else {
                        peg$currPos = s11;
                        s11 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s11;
                      s11 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s11;
                    s11 = peg$FAILED;
                  }
                }
                if (s10 !== peg$FAILED) {
                  s9 = [s9, s10];
                  s8 = s9;
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
              if (s8 !== peg$FAILED) {
                s7 = [s7, s8];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c72(s6);
            }
            s5 = s6;
            if (s5 === peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parsewhitespace();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsestar();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s5;
                  s6 = peg$c73();
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsewhitespace();
              if (s6 !== peg$FAILED) {
                s7 = peg$parserparen();
                if (s7 !== peg$FAILED) {
                  s2 = [s2, s3, s4, s5, s6, s7];
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c74(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsee_column_ref() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsetable_name();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsedot();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsename();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c75(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsee_table_ref() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsetable_name();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c76(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsetype_name() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsename();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsename();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parselparen();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsesigned_number();
          if (s4 !== peg$FAILED) {
            s5 = peg$parserparen();
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parselparen();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsesigned_number();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsecomma();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsesigned_number();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parserparen();
                  if (s7 !== peg$FAILED) {
                    s3 = [s3, s4, s5, s6, s7];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesigned_number() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseplus();
      if (s1 === peg$FAILED) {
        s1 = peg$parseminus();
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenumeric_literal();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseliteral_value() {
      var s0;

      s0 = peg$parsenumeric_literal();
      if (s0 === peg$FAILED) {
        s0 = peg$parsestring_literal();
        if (s0 === peg$FAILED) {
          s0 = peg$parsestring_literal();
          if (s0 === peg$FAILED) {
            s0 = peg$parseNULL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseCURRENT_TIME();
              if (s0 === peg$FAILED) {
                s0 = peg$parseCURRENT_DATE();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseCURRENT_TIMESTAMP();
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsenumeric_literal() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseplus();
      if (s2 === peg$FAILED) {
        s2 = peg$parseminus();
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = [];
        s5 = peg$parsedigit();
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsedigit();
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos;
          s6 = peg$parsedot();
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parsedigit();
            if (s8 !== peg$FAILED) {
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$parsedigit();
              }
            } else {
              s7 = peg$FAILED;
            }
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parsedot();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parsedigit();
            if (s6 !== peg$FAILED) {
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parsedigit();
              }
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parseE();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseplus();
            if (s6 === peg$FAILED) {
              s6 = peg$parseminus();
            }
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            if (s6 !== peg$FAILED) {
              s7 = [];
              s8 = peg$parsedigit();
              if (s8 !== peg$FAILED) {
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parsedigit();
                }
              } else {
                s7 = peg$FAILED;
              }
              if (s7 !== peg$FAILED) {
                s5 = [s5, s6, s7];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c77(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsecall_function() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsename();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsewhitespace();
        if (s3 !== peg$FAILED) {
          s4 = peg$parselparen();
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parsewhitespace();
            if (s6 !== peg$FAILED) {
              s7 = peg$currPos;
              s8 = peg$parsetable_name();
              if (s8 !== peg$FAILED) {
                s9 = peg$parsedot();
                if (s9 !== peg$FAILED) {
                  s8 = [s8, s9];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              if (s7 === peg$FAILED) {
                s7 = null;
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsestar();
                if (s8 !== peg$FAILED) {
                  peg$savedPos = s5;
                  s6 = peg$c78(s7);
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$currPos;
              s7 = peg$parseDISTINCT();
              if (s7 === peg$FAILED) {
                s7 = null;
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$currPos;
                s9 = peg$parseexpr();
                if (s9 !== peg$FAILED) {
                  s10 = [];
                  s11 = peg$currPos;
                  s12 = peg$parsewhitespace();
                  if (s12 !== peg$FAILED) {
                    s13 = peg$parsecomma();
                    if (s13 !== peg$FAILED) {
                      s14 = peg$parseexpr();
                      if (s14 !== peg$FAILED) {
                        s12 = [s12, s13, s14];
                        s11 = s12;
                      } else {
                        peg$currPos = s11;
                        s11 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s11;
                      s11 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s11;
                    s11 = peg$FAILED;
                  }
                  while (s11 !== peg$FAILED) {
                    s10.push(s11);
                    s11 = peg$currPos;
                    s12 = peg$parsewhitespace();
                    if (s12 !== peg$FAILED) {
                      s13 = peg$parsecomma();
                      if (s13 !== peg$FAILED) {
                        s14 = peg$parseexpr();
                        if (s14 !== peg$FAILED) {
                          s12 = [s12, s13, s14];
                          s11 = s12;
                        } else {
                          peg$currPos = s11;
                          s11 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s11;
                        s11 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s11;
                      s11 = peg$FAILED;
                    }
                  }
                  if (s10 !== peg$FAILED) {
                    s9 = [s9, s10];
                    s8 = s9;
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s5;
                s6 = peg$c79(s6);
              }
              s5 = s6;
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsewhitespace();
              if (s6 !== peg$FAILED) {
                s7 = peg$parserparen();
                if (s7 !== peg$FAILED) {
                  s2 = [s2, s3, s4, s5, s6, s7];
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c80(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsecolumn_ref() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$currPos;
      s3 = peg$parsetable_name();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsedot();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsename();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c81(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsegrouping_term() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsewhitespace();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpr();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c82(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseordering_term() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsewhitespace();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseexpr();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseASC();
          if (s5 === peg$FAILED) {
            s5 = peg$parseDESC();
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c83(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsecompound_operator() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseUNION();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseALL();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$parseINTERSECT();
        if (s1 === peg$FAILED) {
          s1 = peg$parseEXCEPT();
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c84(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseunary_operator() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsewhitespace();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s3 = peg$c85;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c86); }
        }
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 43) {
            s3 = peg$c87;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c88); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 126) {
              s3 = peg$c89;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c90); }
            }
            if (s3 === peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c91) {
                s3 = peg$c91;
                peg$currPos += 3;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c92); }
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c93(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsebinary_op_wout_and() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsewhitespace();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c94) {
          s3 = peg$c94;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c95); }
        }
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 42) {
            s3 = peg$c96;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c97); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 47) {
              s3 = peg$c98;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c99); }
            }
            if (s3 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 37) {
                s3 = peg$c100;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c101); }
              }
              if (s3 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 43) {
                  s3 = peg$c87;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c88); }
                }
                if (s3 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 45) {
                    s3 = peg$c85;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c86); }
                  }
                  if (s3 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c102) {
                      s3 = peg$c102;
                      peg$currPos += 2;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c103); }
                    }
                    if (s3 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c104) {
                        s3 = peg$c104;
                        peg$currPos += 2;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c105); }
                      }
                      if (s3 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 38) {
                          s3 = peg$c106;
                          peg$currPos++;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c107); }
                        }
                        if (s3 === peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 124) {
                            s3 = peg$c108;
                            peg$currPos++;
                          } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c109); }
                          }
                          if (s3 === peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c110) {
                              s3 = peg$c110;
                              peg$currPos += 2;
                            } else {
                              s3 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c111); }
                            }
                            if (s3 === peg$FAILED) {
                              if (input.substr(peg$currPos, 2) === peg$c112) {
                                s3 = peg$c112;
                                peg$currPos += 2;
                              } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c113); }
                              }
                              if (s3 === peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 60) {
                                  s3 = peg$c114;
                                  peg$currPos++;
                                } else {
                                  s3 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c115); }
                                }
                                if (s3 === peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 62) {
                                    s3 = peg$c116;
                                    peg$currPos++;
                                  } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c117); }
                                  }
                                  if (s3 === peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 61) {
                                      s3 = peg$c118;
                                      peg$currPos++;
                                    } else {
                                      s3 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c119); }
                                    }
                                    if (s3 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 2) === peg$c120) {
                                        s3 = peg$c120;
                                        peg$currPos += 2;
                                      } else {
                                        s3 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c121); }
                                      }
                                      if (s3 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 2) === peg$c122) {
                                          s3 = peg$c122;
                                          peg$currPos += 2;
                                        } else {
                                          s3 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c123); }
                                        }
                                        if (s3 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 2) === peg$c124) {
                                            s3 = peg$c124;
                                            peg$currPos += 2;
                                          } else {
                                            s3 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c125); }
                                          }
                                          if (s3 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 2) === peg$c126) {
                                              s3 = peg$c126;
                                              peg$currPos += 2;
                                            } else {
                                              s3 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c127); }
                                            }
                                            if (s3 === peg$FAILED) {
                                              if (input.substr(peg$currPos, 6) === peg$c128) {
                                                s3 = peg$c128;
                                                peg$currPos += 6;
                                              } else {
                                                s3 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c129); }
                                              }
                                              if (s3 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 2) === peg$c130) {
                                                  s3 = peg$c130;
                                                  peg$currPos += 2;
                                                } else {
                                                  s3 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c131); }
                                                }
                                                if (s3 === peg$FAILED) {
                                                  if (input.substr(peg$currPos, 6) === peg$c132) {
                                                    s3 = peg$c132;
                                                    peg$currPos += 6;
                                                  } else {
                                                    s3 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c133); }
                                                  }
                                                  if (s3 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 4) === peg$c134) {
                                                      s3 = peg$c134;
                                                      peg$currPos += 4;
                                                    } else {
                                                      s3 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c135); }
                                                    }
                                                    if (s3 === peg$FAILED) {
                                                      if (input.substr(peg$currPos, 4) === peg$c136) {
                                                        s3 = peg$c136;
                                                        peg$currPos += 4;
                                                      } else {
                                                        s3 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c137); }
                                                      }
                                                      if (s3 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 5) === peg$c138) {
                                                          s3 = peg$c138;
                                                          peg$currPos += 5;
                                                        } else {
                                                          s3 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$c139); }
                                                        }
                                                        if (s3 === peg$FAILED) {
                                                          if (input.substr(peg$currPos, 6) === peg$c140) {
                                                            s3 = peg$c140;
                                                            peg$currPos += 6;
                                                          } else {
                                                            s3 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c141); }
                                                          }
                                                          if (s3 === peg$FAILED) {
                                                            if (input.substr(peg$currPos, 2) === peg$c142) {
                                                              s3 = peg$c142;
                                                              peg$currPos += 2;
                                                            } else {
                                                              s3 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$c143); }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c93(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsebinary_operator() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsewhitespace();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c94) {
          s3 = peg$c94;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c95); }
        }
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 42) {
            s3 = peg$c96;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c97); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 47) {
              s3 = peg$c98;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c99); }
            }
            if (s3 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 37) {
                s3 = peg$c100;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c101); }
              }
              if (s3 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 43) {
                  s3 = peg$c87;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c88); }
                }
                if (s3 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 45) {
                    s3 = peg$c85;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c86); }
                  }
                  if (s3 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c102) {
                      s3 = peg$c102;
                      peg$currPos += 2;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c103); }
                    }
                    if (s3 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c104) {
                        s3 = peg$c104;
                        peg$currPos += 2;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c105); }
                      }
                      if (s3 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 38) {
                          s3 = peg$c106;
                          peg$currPos++;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c107); }
                        }
                        if (s3 === peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 124) {
                            s3 = peg$c108;
                            peg$currPos++;
                          } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c109); }
                          }
                          if (s3 === peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c110) {
                              s3 = peg$c110;
                              peg$currPos += 2;
                            } else {
                              s3 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c111); }
                            }
                            if (s3 === peg$FAILED) {
                              if (input.substr(peg$currPos, 2) === peg$c112) {
                                s3 = peg$c112;
                                peg$currPos += 2;
                              } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c113); }
                              }
                              if (s3 === peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 60) {
                                  s3 = peg$c114;
                                  peg$currPos++;
                                } else {
                                  s3 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c115); }
                                }
                                if (s3 === peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 62) {
                                    s3 = peg$c116;
                                    peg$currPos++;
                                  } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c117); }
                                  }
                                  if (s3 === peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 61) {
                                      s3 = peg$c118;
                                      peg$currPos++;
                                    } else {
                                      s3 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c119); }
                                    }
                                    if (s3 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 2) === peg$c120) {
                                        s3 = peg$c120;
                                        peg$currPos += 2;
                                      } else {
                                        s3 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c121); }
                                      }
                                      if (s3 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 2) === peg$c122) {
                                          s3 = peg$c122;
                                          peg$currPos += 2;
                                        } else {
                                          s3 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c123); }
                                        }
                                        if (s3 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 2) === peg$c124) {
                                            s3 = peg$c124;
                                            peg$currPos += 2;
                                          } else {
                                            s3 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c125); }
                                          }
                                          if (s3 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 2) === peg$c126) {
                                              s3 = peg$c126;
                                              peg$currPos += 2;
                                            } else {
                                              s3 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c127); }
                                            }
                                            if (s3 === peg$FAILED) {
                                              if (input.substr(peg$currPos, 6) === peg$c128) {
                                                s3 = peg$c128;
                                                peg$currPos += 6;
                                              } else {
                                                s3 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c129); }
                                              }
                                              if (s3 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 2) === peg$c130) {
                                                  s3 = peg$c130;
                                                  peg$currPos += 2;
                                                } else {
                                                  s3 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c131); }
                                                }
                                                if (s3 === peg$FAILED) {
                                                  if (input.substr(peg$currPos, 6) === peg$c132) {
                                                    s3 = peg$c132;
                                                    peg$currPos += 6;
                                                  } else {
                                                    s3 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c133); }
                                                  }
                                                  if (s3 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 4) === peg$c134) {
                                                      s3 = peg$c134;
                                                      peg$currPos += 4;
                                                    } else {
                                                      s3 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c135); }
                                                    }
                                                    if (s3 === peg$FAILED) {
                                                      if (input.substr(peg$currPos, 4) === peg$c136) {
                                                        s3 = peg$c136;
                                                        peg$currPos += 4;
                                                      } else {
                                                        s3 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c137); }
                                                      }
                                                      if (s3 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 5) === peg$c138) {
                                                          s3 = peg$c138;
                                                          peg$currPos += 5;
                                                        } else {
                                                          s3 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$c139); }
                                                        }
                                                        if (s3 === peg$FAILED) {
                                                          if (input.substr(peg$currPos, 6) === peg$c140) {
                                                            s3 = peg$c140;
                                                            peg$currPos += 6;
                                                          } else {
                                                            s3 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c141); }
                                                          }
                                                          if (s3 === peg$FAILED) {
                                                            if (input.substr(peg$currPos, 3) === peg$c41) {
                                                              s3 = peg$c41;
                                                              peg$currPos += 3;
                                                            } else {
                                                              s3 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$c42); }
                                                            }
                                                            if (s3 === peg$FAILED) {
                                                              if (input.substr(peg$currPos, 2) === peg$c142) {
                                                                s3 = peg$c142;
                                                                peg$currPos += 2;
                                                              } else {
                                                                s3 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c143); }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c93(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsename() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c144.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c145); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c144.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c145); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c146(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsetype() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c147) {
        s0 = peg$c147;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c148); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c149) {
          s0 = peg$c149;
          peg$currPos += 7;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c150); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c151) {
            s0 = peg$c151;
            peg$currPos += 5;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c152); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c153) {
              s0 = peg$c153;
              peg$currPos += 4;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c154); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 7) === peg$c155) {
                s0 = peg$c155;
                peg$currPos += 7;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c156); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c157) {
                  s0 = peg$c157;
                  peg$currPos += 4;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c158); }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsetable_name() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsename();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c159(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedigit() {
      var s0;

      if (peg$c160.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c161); }
      }

      return s0;
    }

    function peg$parseequal() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 61) {
        s0 = peg$c118;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c119); }
      }

      return s0;
    }

    function peg$parsedot() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 46) {
        s0 = peg$c162;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c163); }
      }

      return s0;
    }

    function peg$parsecomma() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 44) {
        s0 = peg$c164;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c165); }
      }

      return s0;
    }

    function peg$parsesemicolon() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 59) {
        s0 = peg$c166;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c167); }
      }

      return s0;
    }

    function peg$parseminusminus() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c168) {
        s0 = peg$c168;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c169); }
      }

      return s0;
    }

    function peg$parseminus() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 45) {
        s0 = peg$c85;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c86); }
      }

      return s0;
    }

    function peg$parseplus() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 43) {
        s0 = peg$c87;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c88); }
      }

      return s0;
    }

    function peg$parselparen() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 40) {
        s0 = peg$c170;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c171); }
      }

      return s0;
    }

    function peg$parserparen() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 41) {
        s0 = peg$c172;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c173); }
      }

      return s0;
    }

    function peg$parsestar() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 42) {
        s0 = peg$c96;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c97); }
      }

      return s0;
    }

    function peg$parsenewline() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 10) {
        s0 = peg$c174;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c175); }
      }

      return s0;
    }

    function peg$parseanything_except_newline() {
      var s0, s1;

      s0 = [];
      if (peg$c176.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c177); }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$c176.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c177); }
        }
      }

      return s0;
    }

    function peg$parsecomment_beg() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c178) {
        s0 = peg$c178;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c179); }
      }

      return s0;
    }

    function peg$parsecomment_end() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c180) {
        s0 = peg$c180;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c181); }
      }

      return s0;
    }

    function peg$parseanything_except_comment_end() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = [];
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c182); }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c182); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c180) {
          s3 = peg$c180;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c181); }
        }
        peg$silentFails--;
        if (s3 !== peg$FAILED) {
          peg$currPos = s2;
          s2 = void 0;
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsestring_literal() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s2 = peg$c183;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c184); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseescape_char();
        if (s4 === peg$FAILED) {
          if (peg$c185.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c186); }
          }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseescape_char();
          if (s4 === peg$FAILED) {
            if (peg$c185.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c186); }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 39) {
            s4 = peg$c183;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c184); }
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c187(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseescape_char() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c188;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c189); }
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c182); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsenil() {
      var s0;

      s0 = peg$c190;

      return s0;
    }

    function peg$parseCURRENT_TIME() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c191) {
        s0 = peg$c191;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c192); }
      }

      return s0;
    }

    function peg$parseCURRENT_DATE() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c191) {
        s0 = peg$c191;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c192); }
      }

      return s0;
    }

    function peg$parseCURRENT_TIMESTAMP() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c191) {
        s0 = peg$c191;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c192); }
      }

      return s0;
    }

    function peg$parsewhitespace() {
      var s0, s1;

      s0 = [];
      if (peg$c193.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c194); }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$c193.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c194); }
        }
      }

      return s0;
    }

    function peg$parsewhitespace1() {
      var s0, s1;

      s0 = [];
      if (peg$c193.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c194); }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (peg$c193.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c194); }
          }
        }
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseADD() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c195) {
          s2 = peg$c195;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c196); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseALL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c197) {
          s2 = peg$c197;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c198); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseALTER() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c199) {
          s2 = peg$c199;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c200); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseAND() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c41) {
          s2 = peg$c41;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c42); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseAS() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c201) {
          s2 = peg$c201;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c202); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseASC() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c203) {
          s2 = peg$c203;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c204); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseBETWEEN() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c205) {
          s2 = peg$c205;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c206); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseBY() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c207) {
          s2 = peg$c207;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c208); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseCAST() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c209) {
          s2 = peg$c209;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c210); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseCOLUMN() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c211) {
          s2 = peg$c211;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c212); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseDESC() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c213) {
          s2 = peg$c213;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c214); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseDISTINCT() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c215) {
          s2 = peg$c215;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c216); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseE() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 69) {
        s0 = peg$c217;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c218); }
      }

      return s0;
    }

    function peg$parseESCAPE() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c219) {
          s2 = peg$c219;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c220); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseEXCEPT() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c221) {
          s2 = peg$c221;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c222); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseEXISTS() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c66) {
          s2 = peg$c66;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c67); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseEXPLAIN() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c223) {
          s2 = peg$c223;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c224); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseEVENT() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c225) {
          s2 = peg$c225;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c226); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseFORALL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c69) {
          s2 = peg$c69;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c70); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseFROM() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c227) {
          s2 = peg$c227;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c228); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseGLOB() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c136) {
          s2 = peg$c136;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c137); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseGROUP() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c229) {
          s2 = peg$c229;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c230); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseHAVING() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c231) {
          s2 = peg$c231;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c232); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseIN() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c130) {
          s2 = peg$c130;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c131); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseINNER() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c233) {
          s2 = peg$c233;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c234); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseINSERT() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c235) {
          s2 = peg$c235;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c236); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseINTERSECT() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c237) {
          s2 = peg$c237;
          peg$currPos += 9;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c238); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseINTO() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c239) {
          s2 = peg$c239;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c240); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseIS() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c126) {
          s2 = peg$c126;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c127); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseISNULL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c241) {
          s2 = peg$c241;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c242); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseJOIN() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c243) {
          s2 = peg$c243;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c244); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseKEY() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c245) {
          s2 = peg$c245;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c246); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseLEFT() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c247) {
          s2 = peg$c247;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c248); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseLIKE() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c134) {
          s2 = peg$c134;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c135); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseLIMIT() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c249) {
          s2 = peg$c249;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c250); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseMATCH() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c138) {
          s2 = peg$c138;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c139); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseNO() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c251) {
          s2 = peg$c251;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c252); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseNOT() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c91) {
          s2 = peg$c91;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c92); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseNOTNULL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c253) {
          s2 = peg$c253;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c254); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseNULL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c255) {
          s2 = peg$c255;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c256); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseOF() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c257) {
          s2 = peg$c257;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c258); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseOFFSET() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c259) {
          s2 = peg$c259;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c260); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseON() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c261) {
          s2 = peg$c261;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c262); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseOR() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c142) {
          s2 = peg$c142;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c143); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseORDER() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c263) {
          s2 = peg$c263;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c264); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseOUTER() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c265) {
          s2 = peg$c265;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c266); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsePRIMARY() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c267) {
          s2 = peg$c267;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c268); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseQUERY() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c269) {
          s2 = peg$c269;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c270); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseRAISE() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c271) {
          s2 = peg$c271;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c272); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseREFERENCES() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 10) === peg$c273) {
          s2 = peg$c273;
          peg$currPos += 10;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c274); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseREGEXP() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c140) {
          s2 = peg$c140;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c141); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseRENAME() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c275) {
          s2 = peg$c275;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c276); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseREPLACE() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c277) {
          s2 = peg$c277;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c278); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseRETURN() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c34) {
          s2 = peg$c34;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c35); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseROW() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c279) {
          s2 = peg$c279;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c280); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSAVEPOINT() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c281) {
          s2 = peg$c281;
          peg$currPos += 9;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c282); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSELECT() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c283) {
          s2 = peg$c283;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c284); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSET() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c285) {
          s2 = peg$c285;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c286); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTABLE() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c287) {
          s2 = peg$c287;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c288); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTEMP() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c289) {
          s2 = peg$c289;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c290); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTEMPORARY() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c291) {
          s2 = peg$c291;
          peg$currPos += 9;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c292); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTHEN() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c293) {
          s2 = peg$c293;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c294); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTO() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c295) {
          s2 = peg$c295;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c296); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseUNION() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c297) {
          s2 = peg$c297;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c298); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseUSING() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c299) {
          s2 = peg$c299;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c300); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsevALUES() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c301) {
          s2 = peg$c301;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c302); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseVIRTUAL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c303) {
          s2 = peg$c303;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c304); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseWITH() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c305) {
          s2 = peg$c305;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c306); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseWHERE() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c307) {
          s2 = peg$c307;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c308); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsejs_string_literal() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c310;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c311); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsejs_double_string_character();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsejs_double_string_character();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s3 = peg$c310;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c311); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c312(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 39) {
          s1 = peg$c183;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c184); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parsejs_single_string_character();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsejs_single_string_character();
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 39) {
              s3 = peg$c183;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c184); }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c312(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c309); }
      }

      return s0;
    }

    function peg$parsejs_double_string_character() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 34) {
        s2 = peg$c310;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c311); }
      }
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 92) {
          s2 = peg$c188;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c189); }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$parsejs_line_terminator();
        }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsejs_source_character();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c313();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s1 = peg$c188;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c189); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsejs_escape_sequence();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c314(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsejs_line_continuation();
        }
      }

      return s0;
    }

    function peg$parsejs_single_string_character() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 39) {
        s2 = peg$c183;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c184); }
      }
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 92) {
          s2 = peg$c188;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c189); }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$parsejs_line_terminator();
        }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsejs_source_character();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c313();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s1 = peg$c188;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c189); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsejs_escape_sequence();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c314(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsejs_line_continuation();
        }
      }

      return s0;
    }

    function peg$parsejs_line_continuation() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c188;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c189); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsejs_line_terminator_sequence();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c315();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsejs_escape_sequence() {
      var s0, s1, s2, s3;

      s0 = peg$parsejs_character_escape_sequence();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 48) {
          s1 = peg$c316;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c317); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          peg$silentFails++;
          s3 = peg$parsejs_decimal_digit();
          peg$silentFails--;
          if (s3 === peg$FAILED) {
            s2 = void 0;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c318();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsejs_hex_escape_sequence();
          if (s0 === peg$FAILED) {
            s0 = peg$parsejs_unicode_escape_sequence();
          }
        }
      }

      return s0;
    }

    function peg$parsejs_line_terminator() {
      var s0;

      if (peg$c319.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c320); }
      }

      return s0;
    }

    function peg$parsejs_source_character() {
      var s0;

      if (input.length > peg$currPos) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c182); }
      }

      return s0;
    }

    function peg$parsejs_character_escape_sequence() {
      var s0;

      s0 = peg$parsejs_single_escape_character();
      if (s0 === peg$FAILED) {
        s0 = peg$parsejs_non_escape_character();
      }

      return s0;
    }

    function peg$parsejs_single_escape_character() {
      var s0, s1;

      if (input.charCodeAt(peg$currPos) === 39) {
        s0 = peg$c183;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c184); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s0 = peg$c310;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c311); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 92) {
            s0 = peg$c188;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c189); }
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 98) {
              s1 = peg$c321;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c322); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c323();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 102) {
                s1 = peg$c324;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c325); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c326();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 110) {
                  s1 = peg$c327;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c328); }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c329();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 114) {
                    s1 = peg$c330;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c331); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c332();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 116) {
                      s1 = peg$c333;
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c334); }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c335();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 118) {
                        s1 = peg$c336;
                        peg$currPos++;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c337); }
                      }
                      if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c338();
                      }
                      s0 = s1;
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsejs_line_terminator_sequence() {
      var s0, s1;

      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 10) {
        s0 = peg$c174;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c175); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c340) {
          s0 = peg$c340;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c341); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 13) {
            s0 = peg$c342;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c343); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 8232) {
              s0 = peg$c344;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c345); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 8233) {
                s0 = peg$c346;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c347); }
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c339); }
      }

      return s0;
    }

    function peg$parsejs_non_escape_character() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parsejs_escape_character();
      if (s2 === peg$FAILED) {
        s2 = peg$parsejs_line_terminator();
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsejs_source_character();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c313();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsejs_escape_character() {
      var s0;

      s0 = peg$parsejs_single_escape_character();
      if (s0 === peg$FAILED) {
        s0 = peg$parsejs_decimal_digit();
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 120) {
            s0 = peg$c348;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c349); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 117) {
              s0 = peg$c350;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c351); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsejs_decimal_digit() {
      var s0;

      if (peg$c160.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c161); }
      }

      return s0;
    }

    function peg$parsejs_hex_escape_sequence() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 120) {
        s1 = peg$c348;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c349); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        s4 = peg$parsejs_hex_digit();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsejs_hex_digit();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c352(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsejs_hex_digit() {
      var s0;

      if (peg$c353.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c354); }
      }

      return s0;
    }

    function peg$parsejs_unicode_escape_sequence() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 117) {
        s1 = peg$c350;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c351); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        s4 = peg$parsejs_hex_digit();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsejs_hex_digit();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsejs_hex_digit();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsejs_hex_digit();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c352(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(
        null,
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();
